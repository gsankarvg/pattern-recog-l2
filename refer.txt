Q4. steps to compute the Euclidean distance between two grayscale images.

a) Read the Images
    Load both grayscale images into arrays (e.g., using OpenCV, PIL, or matplotlib).

b) Ensure Same Size
    Check that both images have the same dimensions. If not, resize or crop them as needed.

c) Flatten the Images
    Convert each 2D image array into a 1D vector (using img.flatten()).

d) Compute the Difference
    Subtract one image vector from the other to get the difference vector.

e) Square the Differences
    Square each element of the difference vector.

f) Sum the Squares
    Add up all the squared differences. 

g) Take the Square Root
    Compute the square root of the sum to get the Euclidean distance.

*****************************************************************************************************************************************************

Q1. For face recognition on the ORL dataset using LDA (Linear Discriminant Analysis) for dimensionality reduction, the typical workflow is:

Steps:
Load the ORL dataset (images and labels).
Flatten images into 1D vectors.
Split the data into training and testing sets.
Apply LDA to reduce dimensionality.
Train a classifier (e.g., K-Nearest Neighbors, SVM, Logistic Regression) on the reduced features.
Evaluate performance (accuracy, confusion matrix, etc.).


lda = LinearDiscriminantAnalysis(n_components=min(len(np.unique(y_train))-1, X_train.shape[1]))
This line creates an LDA model with the maximum allowed number of components (up to n_classes - 1 or the number of features),
ensuring optimal dimensionality reduction for the data.

*****************************************************************************************************************************************************
